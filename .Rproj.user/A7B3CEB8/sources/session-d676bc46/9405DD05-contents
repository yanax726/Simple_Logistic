 ---
title: "Using SimpleLogistic for Logistic Regression Analysis"
output: rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{Using SimpleLogistic}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---

---

### **Explanation of Sections in Vignette**

- **Introduction**: Explains the purpose of the package and why itâ€™s useful.
- **Getting Started**: Guides the user through installation and loading the package/data.
- **Fitting a Logistic Regression Model**: Demonstrates the main function, `simple_logistic()`, with an example.
- **Diagnostics**: Covers diagnostic plots, including residuals vs fitted and the ROC curve.
- **Visualization**: Introduces the `plot_predictions()` function for visualizing predicted probabilities.
- **Advanced Usage**: Shows how to include interaction terms and make predictions on new data.
- **Comparison with Base R Functions**: Verifies correctness and benchmarks efficiency compared to `glm()`.
- **Conclusion**: Summarizes the benefits of using **SimpleLogistic**.
- **References**: Provides academic references for logistic regression.

---
## Introduction
Logistic regression is essential for modeling binary outcomes. The `SimpleLogistic` package simplifies this process with user-friendly functions.

## Getting Started

```{r setup, include=FALSE}
library(SimpleLogistic)
data("health_data")
head(health_data)
```

## Fitting a Logistic Regression Model
```{r}
# Fit the model
model <- simple_logistic(outcome ~ age + bmi + treatment, data = health_data)

# Summarize the model
summary(model$fit)
```

## Diagnostics
Generate diagnostic plots to assess the model fit.
```{r}
# Generate diagnostic plots
plots <- diagnostic_plots(model)
# Residuals vs Fitted Values
print(plots$residuals_vs_fitted)
# ROC curve
print(plots$roc_curve)
```

## Visualization
Visualize the predicted probabilities against the observed outcomes.
```{r}
plot_predictions(model)
```

## Advanced Usage
### Including Interaction Terms
We can include interaction terms in the model formula.
```{r}
# Fit a model with interaction terms
model_interaction <- simple_logistic(outcome ~ age * treatment + bmi, data = health_data)
summary(model_interaction$fit)
```

## Making Predictions on New Data
```{r}
# New data for prediction
new_data <- data.frame(
  age = c(35, 45, 55),
  bmi = c(24, 28, 31),
  treatment = c("A", "B", "A")
)

# Predict probabilities
new_data$predicted_prob <- predict(model$fit, newdata = new_data, type = "response")

# View the predictions
print(new_data)
```

## Comparasion with basic R function
Check that the results are consistent with base R's glm() function.
```{r}
# Fit a model using glm()
model_glm <- glm(outcome ~ age + bmi + treatment, data = health_data, family = binomial())

# Compare coefficients
all.equal(coef(model$fit), coef(model_glm))
```

## Conclusion
The SimpleLogistic package provides a streamlined approach to logistic regression analysis with enhanced diagnostics and visualization tools. It is particularly useful for health researchers and practitioners who need to model binary outcomes efficiently and interpret results effectively.

## Reference
Hosmer, D. W., Lemeshow, S., & Sturdivant, R. X. (2013). Applied Logistic Regression. Wiley.
